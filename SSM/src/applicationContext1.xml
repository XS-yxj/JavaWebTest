<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--引入外部属性文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--配置c3p0连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--配置业务层-->
    <bean id="accountService" class="com.demo1.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"/>

    </bean>

    <!--配置DAO的类-->
    <bean id="accountDao" class="com.demo1.AccountDaoImpl">
        <!--注入连接池，就可以使用模板-->
        <property name="dataSource" ref="dataSource"/>
    </bean>





    <!--************************************声明式的事务管理1**********************************-->

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--配置业务层的代理-->
    <bean id="accountServiceProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <!--配置目标对象-->
        <property name="target" ref="accountService" />
        <!--注入事务管理器-->
        <property name="transactionManager" ref="transactionManager" />
        <!--注入事务属性-->
        <property name="transactionAttributes" >
            <props>
                <!--props格式,使用逗号隔开
                        * PROPAGATION	:事务的传播行为
                        * ISOTATION		:事务的隔离级别
                        * readOnly		:只读
                        * -EXCEPTION	:发生哪些异常回滚事务
                        * +EXCEPTION 	:发生哪些异常不回滚事务
                -->
                <!--必须的传播行为()-->
                <prop key="transfer">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>


</beans>